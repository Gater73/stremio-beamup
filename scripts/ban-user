#!/usr/bin/env bash

# Ensure the script is run with sudo
if [ "$EUID" -ne 0 ]; then
    echo "Please run as root using sudo"
    exit 1
fi

# Check if the correct number of arguments is provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <github_user_hashed>"
    exit 1
fi

AUTH_KEYS_PATH="$HOME/.ssh/authorized_keys"

github_user_hashed=$1
BAN_LIST="ban_list.txt"

# Check if the ban_list file exists, if not, create it
if [ ! -f "$BAN_LIST" ]; then
    touch "$BAN_LIST"
    echo "Ban list created at $BAN_LIST."
fi

# Check if the github_user_hashed is already in the ban_list
if grep -q "$github_user_hashed" "$BAN_LIST"; then
    echo "$github_user_hashed is already banned."
else
    echo "$github_user_hashed" >> "$BAN_LIST"
    echo "$github_user_hashed has been added to the ban list."
fi

# Check and delete the line containing GITHUB_USER='$github_user_hashed' from the authorized_keys file

if [ -f "$AUTH_KEYS_PATH" ]; then
    # Create a temporary file to store the updated authorized_keys
    temp_file=$(mktemp)

    # Read through the authorized_keys file and write all lines except the one to be deleted to the temp file
    while IFS= read -r line; do
        if [[ "$line" != *"GITHUB_USER='$github_user_hashed'"* ]]; then
            echo "$line" >> "$temp_file"
        fi
    done < "$AUTH_KEYS_PATH"

    # Replace the original authorized_keys with the updated one
    mv "$temp_file" "$AUTH_KEYS_PATH"
    echo "Removed GITHUB_USER='$github_user_hashed' from $AUTH_KEYS_PATH."
else
    echo "$AUTH_KEYS_PATH does not exist."
fi
